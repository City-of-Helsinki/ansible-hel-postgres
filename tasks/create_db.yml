- name: Ensure database user exists
  become: "{{ postgres_local_db }}"
  become_user: postgres
  postgresql_user:
    name: "{{ postgres_user }}"
    password: "{{ postgres_pass }}"
    encrypted: true
    state: present
    db: postgres
    login_host: "{{ postgres_host|default(omit) }}"
    login_user: "{{ postgres_login|default(omit) }}"
    login_password: "{{ postgres_loginpw|default(omit) }}"
    ssl_mode: require

- name: Make connection user a member of the database role
  postgresql_privs:
    database: postgres
    type: group
    objs: "{{ postgres_user }}"
    # Azure postgres accounts contain vhost spec after @
    roles: "{{ postgres_login|regex_replace('@.*','') }}"
    login_host: "{{ postgres_host }}"
    login_user: "{{ postgres_login }}"
    login_password: "{{ postgres_loginpw }}"
  when: not postgres_local_db

- name: Destroy the database, if requested
  become: "{{ postgres_local_db }}"
  become_user: postgres
  postgresql_db:
    name: "{{postgres_dbname}}"
    state: absent
    login_host: "{{ postgres_host|default(omit) }}"
    login_user: "{{ postgres_login|default(omit) }}"
    login_password: "{{ postgres_loginpw|default(omit) }}"
  when: postgres_destroy_db
  register: globals_database_destroyed

- name: Ensure database exists
  become: "{{ postgres_local_db }}"
  become_user: postgres
  postgresql_db:
    name: "{{postgres_dbname}}"
    encoding: utf8
    lc_collate: "{% if postgres_login is undefined or not postgres_vhost %}fi_FI.utf8{% else %}fi-FI{% endif %}"
    lc_ctype: "{% if postgres_login is undefined or not postgres_vhost %}fi_FI.utf8{% else %}fi-FI{% endif %}"
    owner: "{{postgres_user}}"
    template: template0
    state: present
    login_host: "{{ postgres_host|default(omit) }}"
    login_user: "{{ postgres_login|default(omit) }}"
    login_password: "{{ postgres_loginpw|default(omit) }}"
  register: postgres_db_creation_status

- name: Ensure PostGIS extension is installed
  become: "{{ postgres_local_db }}"
  become_user: postgres
  postgresql_ext:
    db: "{{postgres_dbname}}"
    name: "postgis"
    login_host: "{{ postgres_host|default(omit) }}"
    login_user: "{{ postgres_login|default(omit) }}"
    login_password: "{{ postgres_loginpw|default(omit) }}"
  when: postgres_postgis

# This is not needed on any modern Postgis, but does not hurt
# We do not even try this if the database is remote, as it is
# most likely a managed DB with extension already configured
- name: Ensure ETRS-GK25 coordinate system is available
  become: "{{ postgres_local_db }}"
  become_user: postgres
  script: setup_3879.sh {{ postgres_dbname }}
  when: postgres_postgis and postgres_host is undefined

- name: Ensure HSTORE extension is installed
  become: "{{ postgres_local_db }}"
  become_user: postgres
  postgresql_ext:
    db: "{{postgres_dbname}}"
    name: hstore
    login_host: "{{ postgres_host|default(omit) }}"
    login_user: "{{ postgres_login|default(omit) }}"
    login_password: "{{ postgres_loginpw|default(omit) }}"
  when: postgres_hstore

- name: Install configured postgres extensions
  become: "{{ postgres_local_db }}"
  become_user: postgres
  postgresql_ext:
    db: "{{ postgres_dbname }}"
    name: "{{ item }}"
    login_host: "{{ postgres_host|default(omit) }}"
    login_user: "{{ postgres_login|default(omit) }}"
    login_password: "{{ postgres_loginpw|default(omit) }}"
  loop: "{{ postgres_wanted_extensions }}"
